📌 DTO 클래스와 Entity 클래스를 나누는 이유
 - DB(Persistence Layer)와 View(Presentation Layer)의 명확한 분리를 위해서 Entity 클래스와 별도로 사용한다.

📌 MySQL 연결
 - MySQL 8.x 이후 데이터베이스와의 연결을 위한 JDBC 드라이버 클래스
   - spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

   - spring.jpa.show-sql=true : JPA가 생성하는 SQL 쿼리를 콘솔에 출력할지 여부
   - spring.jpa.generate-ddl  : JPA가 데이터베이스 스키마를 자동으로 생성할지 여부
   - spring.jpa.hibernate.ddl-auto :  Hibernate가 데이터베이스 스키마를 자동으로 생성할 때 실행할 작업을 결정
     (설정 값은 찾아보는걸로..)

-----------------------------------------------------------------------------------------------------------

📌 DTO , DAO , @Entity , @Repository

   📝 DTO(Data Transfer Object)
       - 주로 데이터를 담는 용도이며, 비즈니스 로직을 가지지 않는다.
       - 데이터 전송 객체로, 데이터를 한 시스템에서 다른 시스템으로 전송하기 위해 사용한다.

   📝 DAO(Data Access Object)
       - 데이터베이스와 통신하여 데이터를 가져오거나 조작하는 객체
       - 주로 데이터베이스에 접근하는 로직을 캡슐화하고, 데이터베이스에 대한 CRUD 작업을 수행한다.
       - DAO는 데이터베이스와의 통신을 추상화하여 비즈니스 로직이 데이터베이스 구현에 종속되지 않도록 합니다.
         - "서비스 계층에서 DB와 직접 연결하는 상황을 만들지 말아야 한다는거네.."

   📝 @Repository
       - 데이터베이스와의 상호 작용을 추상화하는 인터페이스
         - "실질적인 데이터베이스를 조작하는 부분이랄까..?"
         - DAO(추상화) -> @Repository(접근 및 조작) -> DB

   📝 Entity
       - 데이터베이스 테이블에서의 엔터티를 나타내는 클래스
       - 데이터베이스의 테이블과 매핑되며, 데이터베이스 테이블의 각 열은 엔터티 클래스의 필드로 매핑된다.

-----------------------------------------------------------------------------------------------------------
